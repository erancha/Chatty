AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: EncNotes Web App
Globals:
  Function:
    Timeout: 5
    MemorySize: 128
Parameters:
  StageName:
    Type: String
    AllowedValues:
    - dev
    - prod
    Default: dev
  S3PublicAccess:
    Description: Allow public access to the S3 bucket
    Type: String
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'false'
  AllowOnlyCloudfrontOrigin:
    Description: Allow only CloudFront origin
    Type: String
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'false'
  ApiGatewayCorsAllowedMethods:
    Type: String
    Default: '''GET,POST,PUT,DELETE,OPTIONS'''
    Description: Allowed HTTP methods for CORS
  ApiGatewayCorsAllowedHeaders:
    Type: String
    Default: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
    Description: Allowed headers for CORS
  CustomDomainName:
    Description: The custom domain name (optional)
    Type: String
    Default: ''
    AllowedPattern: ^$|(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$
    ConstraintDescription: Must be a valid domain name or empty
  CertificateArn:
    Description: Certificate ARN for the custom domain (optional)
    Type: String
    Default: ''
  GoogleClientId:
    Type: String
    Description: The Google Client ID
  GoogleClientSecret:
    Type: String
    Description: The Google Client Secret
  ExistingElasticacheRedisClusterAddress:
    Description: Address of an existing Redis cluster
    Type: String
    Default: ''
  ExistingVpcId:
    Type: String
    Description: ID of an existing VPC
  ExistingPrivateSubnetId:
    Type: String
    Description: ID of an existing private subnet
  ExistingUserPoolId:
    Description: ID of an existing Cognito User Pool
    Type: String
  ExistingCognitoDomain:
    Description: Existing Cognito Domain
    Type: String
  ExistingIdentityPoolId:
    Description: ID of an existing Cognito Identity Pool
    Type: String
Conditions:
  HasCustomDomainName:
    Fn::Not:
    - Fn::Equals:
      - Ref: CustomDomainName
      - ''
  HasCertificateArn:
    Fn::Not:
    - Fn::Equals:
      - Ref: CertificateArn
      - ''
  UseCustomDomain:
    Fn::And:
    - Condition: HasCustomDomainName
    - Condition: HasCertificateArn
  AllowS3PublicAccess:
    Fn::Equals:
    - Ref: S3PublicAccess
    - 'true'
  AllowOnlyCloudfrontOriginCondition:
    Fn::Equals:
    - Ref: AllowOnlyCloudfrontOrigin
    - 'true'
Resources:
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-frontend-static
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          AllowedOrigins:
          - '*'
          MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls:
          Fn::If:
          - AllowS3PublicAccess
          - false
          - true
        BlockPublicPolicy:
          Fn::If:
          - AllowS3PublicAccess
          - false
          - true
        IgnorePublicAcls:
          Fn::If:
          - AllowS3PublicAccess
          - false
          - true
        RestrictPublicBuckets:
          Fn::If:
          - AllowS3PublicAccess
          - false
          - true
      OwnershipControls:
        Rules:
        - ObjectOwnership: ObjectWriter
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: PublicReadGetObject
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: ${FrontendBucket.Arn}/*
  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - Id: S3Origin
          DomainName:
            Fn::Select:
            - 1
            - Fn::Split:
              - //
              - Fn::GetAtt:
                - FrontendBucket
                - WebsiteURL
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          ForwardedValues:
            QueryString: false
            Headers:
            - Origin
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        ViewerCertificate:
          Fn::If:
          - UseCustomDomain
          - AcmCertificateArn:
              Ref: CertificateArn
            SslSupportMethod: sni-only
          - CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100
        Enabled: true
        Aliases:
          Fn::If:
          - UseCustomDomain
          - - Ref: CustomDomainName
          - Ref: AWS::NoValue
  jsonwebtokenLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ..\..\..\..\backend\layers\jsonwebtoken-layer.zip
      CompatibleRuntimes:
      - nodejs20.x
  AwsSdkV3Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: AWS SDK v3 Layer
      ContentUri: ..\..\..\..\backend\layers\awssdkv3-layer.zip
      CompatibleRuntimes:
      - nodejs20.x
  IoredisLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: ioredis Layer
      ContentUri: ..\..\..\..\backend\layers\ioredis-layer.zip
      CompatibleRuntimes:
      - nodejs20.x
  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ConnectFunction
      Handler: connect.handler
      Runtime: nodejs20.x
      Layers:
      - Ref: jsonwebtokenLayer
      - Ref: IoredisLayer
      Environment:
        Variables:
          ELASTICACHE_REDIS_ADDRESS:
            Ref: ExistingElasticacheRedisClusterAddress
      VpcConfig:
        SubnetIds:
        - Ref: ExistingPrivateSubnetId
        SecurityGroupIds:
        - Ref: WebSocketLambdaSG
      Role:
        Fn::GetAtt:
        - WebSocketLambdaRole
        - Arn
    Metadata:
      SamResourceId: ConnectFunction
  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DisconnectFunction
      Handler: disconnect.handler
      Runtime: nodejs20.x
      Layers:
      - Ref: IoredisLayer
      Environment:
        Variables:
          ELASTICACHE_REDIS_ADDRESS:
            Ref: ExistingElasticacheRedisClusterAddress
      VpcConfig:
        SubnetIds:
        - Ref: ExistingPrivateSubnetId
        SecurityGroupIds:
        - Ref: WebSocketLambdaSG
      Role:
        Fn::GetAtt:
        - WebSocketLambdaRole
        - Arn
    Metadata:
      SamResourceId: DisconnectFunction
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SendMessageFunction
      Handler: sendMessage.handler
      Runtime: nodejs20.x
      Layers:
      - Ref: IoredisLayer
      - Ref: AwsSdkV3Layer
      Environment:
        Variables:
          ELASTICACHE_REDIS_ADDRESS:
            Ref: ExistingElasticacheRedisClusterAddress
      VpcConfig:
        SubnetIds:
        - Ref: ExistingPrivateSubnetId
        SecurityGroupIds:
        - Ref: WebSocketLambdaSG
      Role:
        Fn::GetAtt:
        - WebSocketLambdaRole
        - Arn
    Metadata:
      SamResourceId: SendMessageFunction
  WebSocketLambdaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow WebSocket Lambda functions to access required AWS services
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-WebSocketLambdaSG
      VpcId:
        Ref: ExistingVpcId
      SecurityGroupIngress: []
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: '0.0.0.0/0'
  WebSocketLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
      - PolicyName: ElastiCacheAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - elasticache:Connect
            - elasticache:DescribeCacheClusters
            Resource: '*'
      - PolicyName: NetworkInterfaceAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            Resource: '*'
      - PolicyName: SQSSendMessagePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:SendMessage
            Resource:
              Fn::GetAtt:
              - MessagesToWebsocketsQueue
              - Arn
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-WebSocketAPI
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations
  SendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      Description: SendMessage Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $connect
      OperationName: ConnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: ConnectIntegration
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $disconnect
      OperationName: DisconnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: DisconnectIntegration
  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: SendMessage
      OperationName: SendMessageRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: SendMessageIntegration
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    Properties:
      ApiId:
        Ref: WebSocketApi
  WebSocketLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/apigateway/${WebSocketApi}/Custom-access-logging/
      RetentionInDays: 7
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: WebSocketApi
      StageName:
        Ref: StageName
      AutoDeploy: false
      DeploymentId:
        Ref: WebSocketDeployment
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        LoggingLevel: ERROR
      AccessLogSettings:
        DestinationArn:
          Fn::GetAtt:
          - WebSocketLogGroup
          - Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime",
          "eventType":"$context.eventType", "routeKey":"$context.routeKey", "status":"$context.status",
          "connectionId":"$context.connectionId" }'
  ConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect
  DisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: DisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SendMessageFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/SendMessage
  MessagesToWebsocketsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: ${AWS::StackName}-messagesToWebsocketsQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
  ExtractMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: extractMessages.handler
      Runtime: nodejs20.x
      CodeUri: ExtractMessagesFunction
      Layers:
      - Ref: AwsSdkV3Layer
      Environment:
        Variables:
          WEBSOCKET_API_URL:
            Fn::Sub: wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}
      Role:
        Fn::GetAtt:
        - ExtractMessagesLambdaExecutionRole
        - Arn
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - MessagesToWebsocketsQueue
              - Arn
            BatchSize: 10
            Enabled: true
    Metadata:
      SamResourceId: ExtractMessagesFunction
  ExtractMessagesLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
      - PolicyName: SQSReceiveMessagePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            Resource:
              Fn::GetAtt:
              - MessagesToWebsocketsQueue
              - Arn
      - PolicyName: WebSocketManageConnections
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: execute-api:ManageConnections
            Resource:
              Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
Outputs:
  S3BucketName:
    Description: Name of the S3 bucket hosting the frontend
    Value:
      Ref: FrontendBucket
  S3BucketUrl:
    Description: URL of the S3 bucket hosting the frontend
    Value:
      Fn::GetAtt:
      - FrontendBucket
      - WebsiteURL
  CloudFrontUrl:
    Description: CloudFront distribution URL
    Value:
      Fn::Sub: https://${FrontendDistribution.DomainName}
  CloudFrontDistributionId:
    Description: CloudFront distribution ID
    Value:
      Ref: FrontendDistribution
  AllowOnlyCloudfrontOrigin:
    Value:
      Fn::If:
      - AllowOnlyCloudfrontOriginCondition
      - 'yes'
      - 'no'
  WebSocketApiUrl:
    Description: URL for the WebSocket API Gateway
    Value:
      Fn::Sub: wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}
